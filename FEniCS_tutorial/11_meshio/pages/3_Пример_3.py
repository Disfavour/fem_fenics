import streamlit as st


r"""
# Сохранение MeshFunction с помощью meshio

```python
from dolfin import *
import meshio
mesh = UnitSquareMesh(5, 5)
V = FunctionSpace(mesh, "CG", 1)

f1 = Expression("x[0]", element=V.ufl_element())
e1 = project(f1, V).vector().get_local()
v_to_d = vertex_to_dof_map(V)

meshio.Mesh(
    V.mesh().coordinates(),
    {"triangle": V.mesh().cells()},
    point_data={"e1": e1[v_to_d]},
).write("out.vtk")
```

Данный код генерирует двумерную сетку на единичном квадрате с помощью встроенной функции UnitSquareMesh.
Затем определяется функциональное пространство V типа "CG" (непрерывные лагранжевы конечные элементы) и порядка 1.

Далее определяется объект f1 типа Expression, который задает функцию f1(x,y) = x на основе координат точки (x,y).
Затем с помощью функции project производится проекция функции f1 на функциональное пространство V. Вектор значений
функции f1 в узлах сетки получается с помощью метода get_local(). Затем используется функция vertex_to_dof_map, которая
возвращает отображение номеров вершин сетки в номера соответствующих степеней свободы в функциональном пространстве V.

Для создания объекта сетки формата VTK используется внешняя библиотека meshio. В объект Mesh передаются координаты
узлов и информация о ячейках. В данном случае, используется тип ячеек "triangle", поскольку сетка содержит только
треугольные ячейки. Значение функции f1 в узлах сетки записывается в качестве данных узлов. В итоге, получается файл
формата VTK с именем "out.vtk", содержащий информацию о сетке и значениях функции f1 в узлах сетки.
"""
