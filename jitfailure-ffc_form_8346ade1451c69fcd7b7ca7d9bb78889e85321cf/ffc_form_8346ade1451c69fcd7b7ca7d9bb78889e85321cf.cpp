// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#include "ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_cell_integral_main_otherwise::ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_cell_integral_main_otherwise::~ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true, true});
return enabled;
}

void ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation,
                                    std::size_t local_facet) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 201
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 201
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           201
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights101[101] = { inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE0_C0_D1_Q101[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE0_C0_Q101[1][101][2] =
        { { { 0.9998596697649188, 0.0001403302350812369 },
            { 0.9992607559948787, 0.0007392440051212114 },
            { 0.9981838663954773, 0.001816133604522683 },
            { 0.9966297930939337, 0.003370206906066255 },
            { 0.9945999954375169, 0.005400004562483177 },
            { 0.9920964108151104, 0.00790358918488962 },
            { 0.9891214351432223, 0.01087856485677774 },
            { 0.9856779172790907, 0.01432208272090931 },
            { 0.9817691554165673, 0.01823084458343275 },
            { 0.9773988936355957, 0.02260110636440429 },
            { 0.9725713182023242, 0.02742868179767573 },
            { 0.9672910535094729, 0.03270894649052712 },
            { 0.961563157622807, 0.03843684237719305 },
            { 0.9553931174236969, 0.04460688257630308 },
            { 0.9487868433464394, 0.05121315665356067 },
            { 0.9417506637126803, 0.05824933628731966 },
            { 0.9342913186670652, 0.06570868133293489 },
            { 0.9264159537192551, 0.07358404628074486 },
            { 0.9181321128981442, 0.08186788710185575 },
            { 0.9094477315246288, 0.09055226847537119 },
            { 0.9003711286097434, 0.09962887139025652 },
            { 0.8909109988853715, 0.1090890011146285 },
            { 0.8810764044751248, 0.1189235955248752 },
            { 0.8708767662133423, 0.1291232337866577 },
            { 0.8603218546205085, 0.1396781453794915 },
            { 0.8494217805437223, 0.1505782194562777 },
            { 0.838186985471177, 0.161813014528823 },
            { 0.8266282315299226, 0.1733717684700775 },
            { 0.8147565911764889, 0.1852434088235111 },
            { 0.8025834365902429, 0.1974165634097572 },
            { 0.7901204287796373, 0.2098795712203627 },
            { 0.7773795064117869, 0.2226204935882131 },
            { 0.7643728743760698, 0.2356271256239302 },
            { 0.7511129920927099, 0.2488870079072901 },
            { 0.7376125615775384, 0.2623874384224615 },
            { 0.7238845152743679, 0.2761154847256321 },
            { 0.7099420036666341, 0.290057996333366 },
            { 0.6957983826801712, 0.3042016173198288 },
            { 0.6814672008891909, 0.3185327991108091 },
            { 0.6669621865377162, 0.3330378134622838 },
            { 0.6522972343889066, 0.3477027656110934 },
            { 0.6374863924148697, 0.3625136075851303 },
            { 0.6225438483397099, 0.3774561516602901 },
            { 0.6074839160487048, 0.3925160839512953 },
            { 0.5923210218766287, 0.4076789781233713 },
            { 0.5770696907883579, 0.4229303092116421 },
            { 0.5617445324649949, 0.438255467535005 },
            { 0.5463602273088413, 0.4536397726911587 },
            { 0.5309315123806242, 0.4690684876193758 },
            { 0.5154731672824491, 0.4845268327175509 },
            { 0.5, 0.5 },
            { 0.4845268327175509, 0.5154731672824491 },
            { 0.4690684876193758, 0.5309315123806242 },
            { 0.4536397726911587, 0.5463602273088413 },
            { 0.4382554675350051, 0.5617445324649949 },
            { 0.4229303092116421, 0.5770696907883579 },
            { 0.4076789781233714, 0.5923210218766286 },
            { 0.3925160839512953, 0.6074839160487047 },
            { 0.3774561516602902, 0.6225438483397098 },
            { 0.3625136075851303, 0.6374863924148697 },
            { 0.3477027656110935, 0.6522972343889065 },
            { 0.3330378134622839, 0.6669621865377161 },
            { 0.3185327991108092, 0.6814672008891908 },
            { 0.3042016173198289, 0.6957983826801711 },
            { 0.2900579963333662, 0.7099420036666338 },
            { 0.2761154847256322, 0.7238845152743678 },
            { 0.2623874384224618, 0.7376125615775382 },
            { 0.2488870079072902, 0.7511129920927098 },
            { 0.2356271256239304, 0.7643728743760696 },
            { 0.2226204935882132, 0.7773795064117868 },
            { 0.2098795712203628, 0.7901204287796372 },
            { 0.1974165634097573, 0.8025834365902427 },
            { 0.1852434088235112, 0.8147565911764888 },
            { 0.1733717684700775, 0.8266282315299225 },
            { 0.161813014528823, 0.838186985471177 },
            { 0.1505782194562777, 0.8494217805437223 },
            { 0.1396781453794915, 0.8603218546205085 },
            { 0.1291232337866577, 0.8708767662133423 },
            { 0.1189235955248831, 0.8810764044751169 },
            { 0.1090890011146324, 0.8909109988853676 },
            { 0.09962887139025842, 0.9003711286097416 },
            { 0.09055226847537201, 0.909447731524628 },
            { 0.08186788710185611, 0.9181321128981439 },
            { 0.07358404628074486, 0.9264159537192551 },
            { 0.06570868133293507, 0.9342913186670649 },
            { 0.05824933628731975, 0.9417506637126802 },
            { 0.05121315665356076, 0.9487868433464393 },
            { 0.04460688257630308, 0.9553931174236969 },
            { 0.03843684237719296, 0.9615631576228071 },
            { 0.03270894649052712, 0.9672910535094729 },
            { 0.02742868179767573, 0.9725713182023242 },
            { 0.02260110636440429, 0.9773988936355957 },
            { 0.01823084458343266, 0.9817691554165674 },
            { 0.01432208272091439, 0.9856779172790856 },
            { 0.01087856485679759, 0.9891214351432024 },
            { 0.007903589184891978, 0.992096410815108 },
            { 0.005400004562483358, 0.9945999954375166 },
            { 0.003370206906066255, 0.9966297930939337 },
            { 0.001816133604527941, 0.9981838663954721 },
            { 0.0007392440051219366, 0.9992607559948781 },
            { 0.0001403302351147772, 0.9998596697648853 } } };
    // Unstructured piecewise computations
    double w2_d0_m17588 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w2_d0_m17588 += w[2][ic] * FE0_C0_D1_Q101[0][0][ic];
    const double J_m17588_c0 = coordinate_dofs[0] * FE0_C0_D1_Q101[0][0][0] + coordinate_dofs[1] * FE0_C0_D1_Q101[0][0][1];
    double w0_d0_m17588 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_m17588 += w[0][ic] * FE0_C0_D1_Q101[0][0][ic];
    alignas(32) double sp[3];
    sp[0] = w2_d0_m17588 * (1.0 / J_m17588_c0);
    sp[1] = w0_d0_m17588 * (1.0 / J_m17588_c0);
    sp[2] = std::abs(J_m17588_c0);
    alignas(32) double BF0[2] = {};
    for (int iq = 0; iq < 101; ++iq)
    {
        // Quadrature loop body setup (num_points=101)
        // Unstructured varying computations for num_points=101
        double w0_m17588 = 0.0;
        for (int ic = 0; ic < 2; ++ic)
            w0_m17588 += w[0][ic] * FE0_C0_Q101[0][iq][ic];
        double w2_m17588 = 0.0;
        for (int ic = 0; ic < 2; ++ic)
            w2_m17588 += w[2][ic] * FE0_C0_Q101[0][iq][ic];
        double w1_m17588 = 0.0;
        for (int ic = 0; ic < 2; ++ic)
            w1_m17588 += w[1][ic] * FE0_C0_Q101[0][iq][ic];
        alignas(32) double sv101[6];
        sv101[0] = sp[0] * w0_m17588;
        sv101[1] = sp[1] * w2_m17588;
        sv101[2] = sv101[0] + sv101[1];
        sv101[3] = -1 * w1_m17588 + w0_m17588;
        sv101[4] = sv101[2] + sv101[3] / 0.01;
        sv101[5] = sv101[4] * sp[2];
        const double fw0 = sv101[5] * weights101[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE0_C0_Q101[0][iq][i];
    }
    std::fill(A, A + 2, 0.0);
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_cell_integral_main_otherwise()
{
  return new ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_cell_integral_main_otherwise();
}


ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::~ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main()
{
    // Do nothing
}

const char * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::signature() const
{
    return "766af780b3ace32c45f0a15f877272960ba3021cd3baf469a431ab412f990a28e686032d0cfc497191b79d54a78ff3ef039b4a6071b70077d815eede6a9e051b";
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::rank() const
{
    return 1;
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::num_coefficients() const
{
    return 3;
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2};
    return position[i];
}

ufc::finite_element * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_f15c62f5d90fd349915de9977c93d95ae6a6e4ca_finite_element_main();
}

ufc::dofmap * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_f15c62f5d90fd349915de9977c93d95ae6a6e4ca_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_7b2d1da84570d09b9efefe42fa819358fb99594c_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_0aceea476c4466c38bcd4b3da92b7c720101a8ac_finite_element_main();
    case 1:
        return create_ffc_element_0aceea476c4466c38bcd4b3da92b7c720101a8ac_finite_element_main();
    case 2:
        return create_ffc_element_0aceea476c4466c38bcd4b3da92b7c720101a8ac_finite_element_main();
    case 3:
        return create_ffc_element_0aceea476c4466c38bcd4b3da92b7c720101a8ac_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_0aceea476c4466c38bcd4b3da92b7c720101a8ac_dofmap_main();
    case 1:
        return create_ffc_element_0aceea476c4466c38bcd4b3da92b7c720101a8ac_dofmap_main();
    case 2:
        return create_ffc_element_0aceea476c4466c38bcd4b3da92b7c720101a8ac_dofmap_main();
    case 3:
        return create_ffc_element_0aceea476c4466c38bcd4b3da92b7c720101a8ac_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_default_cell_integral() const
{
    return create_ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main()
{
  return new ffc_form_8346ade1451c69fcd7b7ca7d9bb78889e85321cf_form_main();
}

